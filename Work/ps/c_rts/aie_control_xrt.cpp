#include "adf/adf_api/AIEControlConfig.h"
#include <iostream>


/************************** Graph Configurations  *****************************/

  adf::GraphConfig GraphConfigurations[] = {
  //{id, name, graphLoadElfFunc, graphInitFunc, coreColumns, coreRows, iterMemColumns, iterMemRows, iterMemAddrs, triggered, plKernelInstanceNames, plAxiLiteModes, plDriverStartFuncs, plDriverCheckIPDoneFuncs}
    {0, "my_graph", nullptr, nullptr, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49}, {0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7}, {0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 4, 4, 4, 4, 3, 5, 4, 5, 4, 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 7, 8, 8, 8, 8, 8, 7, 8, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 11, 10, 10, 10, 10, 11, 11, 11, 12, 11, 12, 10, 11, 12, 12, 12, 12, 11, 13, 11, 12, 13, 13, 13, 13, 13, 13, 12, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 15, 17, 16, 18, 17, 17, 17, 17, 17, 18, 17, 18, 18, 18, 17, 18, 18, 19, 18, 19, 19, 19, 19, 19, 19, 20, 19, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 20, 21, 21, 22, 22, 22, 22, 22, 22, 22, 21, 22, 23, 23, 23, 24, 23, 24, 23, 23, 24, 24, 23, 24, 23, 24, 24, 24, 25, 25, 25, 26, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 27, 28, 27, 27, 27, 27, 27, 27, 28, 28, 27, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 31, 30, 31, 30, 31, 31, 31, 31, 31, 30, 32, 31, 32, 32, 32, 32, 32, 32, 33, 32, 33, 33, 33, 33, 33, 33, 34, 33, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 34, 35, 36, 36, 36, 36, 36, 37, 36, 36, 37, 37, 37, 37, 37, 37, 36, 37, 38, 38, 38, 38, 38, 39, 38, 38, 39, 39, 39, 39, 39, 39, 38, 39, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 40, 41, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 45, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49}, {0, 1, 2, 4, 3, 6, 5, 7, 1, 0, 3, 2, 5, 5, 6, 7, 1, 0, 3, 2, 4, 4, 6, 7, 0, 2, 1, 3, 5, 4, 7, 7, 1, 1, 3, 4, 5, 6, 6, 7, 0, 2, 2, 4, 3, 5, 6, 7, 0, 0, 1, 2, 3, 4, 5, 6, 0, 2, 1, 3, 5, 5, 7, 7, 1, 0, 3, 2, 4, 4, 6, 6, 1, 0, 2, 4, 3, 5, 7, 6, 0, 2, 1, 3, 3, 4, 5, 7, 1, 0, 2, 3, 5, 5, 6, 7, 1, 0, 2, 4, 4, 5, 6, 7, 1, 0, 2, 4, 3, 6, 6, 7, 1, 0, 2, 3, 5, 4, 7, 6, 0, 2, 1, 3, 5, 4, 7, 7, 1, 2, 3, 4, 5, 6, 6, 7, 0, 1, 1, 2, 3, 5, 6, 7, 0, 2, 3, 4, 4, 6, 5, 7, 0, 2, 1, 4, 3, 6, 5, 7, 0, 0, 1, 2, 3, 6, 5, 7, 1, 0, 2, 3, 4, 4, 5, 7, 0, 2, 1, 3, 4, 5, 6, 6, 0, 1, 3, 3, 5, 5, 6, 7, 1, 0, 2, 2, 4, 4, 7, 6, 1, 2, 3, 3, 5, 4, 6, 7, 0, 0, 1, 2, 5, 4, 6, 7, 0, 1, 1, 4, 3, 5, 6, 7, 0, 2, 2, 3, 4, 6, 5, 7, 1, 0, 3, 2, 5, 4, 7, 6, 1, 2, 3, 4, 5, 5, 7, 7, 0, 1, 3, 2, 4, 6, 6, 7, 0, 1, 2, 4, 3, 6, 5, 7, 0, 1, 2, 4, 3, 6, 5, 7, 0, 0, 1, 2, 3, 4, 5, 7, 0, 2, 1, 3, 5, 4, 6, 6, 1, 0, 2, 3, 4, 5, 5, 7, 1, 0, 3, 2, 4, 6, 6, 7, 1, 0, 3, 2, 4, 5, 5, 7, 1, 0, 2, 4, 3, 6, 6, 7, 0, 1, 3, 2, 4, 5, 7, 7, 1, 0, 2, 4, 3, 5, 6, 6, 1, 0, 3, 2, 4, 6, 5, 7, 1, 0, 3, 2, 5, 4, 7, 6, 1, 2, 3, 3, 4, 6, 5, 7, 0, 0, 1, 2, 5, 4, 6, 7, 1, 0, 2, 3, 4, 6, 5, 7, 0, 2, 1, 4, 3, 6, 5, 7, 1, 0, 2, 3, 5, 4, 6, 7, 0, 1, 2, 4, 3, 6, 5, 7}, {0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4, 0x12c4}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, {}, {}, {}, {}, },
  };
  const int NUM_GRAPH = 1;

/************************** PLIO Configurations  *****************************/

  adf::PLIOConfig PLIOConfigurations[] = {
  //{id, name, loginal_name, shim_column, slaveOrMaster, streamId}
    {0, "plin[0]", "plioin0", 6, 0, 0},
    {1, "plin[1]", "plioin1", 7, 0, 0},
    {2, "plin[2]", "plioin2", 11, 0, 0},
    {3, "plin[3]", "plioin3", 17, 0, 0},
    {4, "plin[4]", "plioin4", 23, 0, 0},
    {5, "plin[5]", "plioin5", 29, 0, 0},
    {6, "plin[6]", "plioin6", 35, 0, 0},
    {7, "plin[7]", "plioin7", 41, 0, 0},
    {8, "plout[0]", "plioout0", 43, 1, 0},
    {9, "plout[1]", "plioout1", 40, 1, 0},
    {10, "plout[2]", "plioout2", 34, 1, 0},
    {11, "plout[3]", "plioout3", 28, 1, 0},
    {12, "plout[4]", "plioout4", 22, 1, 0},
    {13, "plout[5]", "plioout5", 16, 1, 0},
    {14, "plout[6]", "plioout6", 10, 1, 0},
    {15, "plout[7]", "plioout7", 6, 1, 5},
  };
  const int NUM_PLIO = 16;


/************************** ADF API initializer *****************************/

  class InitializeAIEControlXRT
  {
  public:
    InitializeAIEControlXRT()
    {
      std::cout<<"Initializing ADF API..."<<std::endl;
#ifdef __EXCLUDE_PL_CONTROL__
      bool exclude_pl_control = true;
#else
      bool exclude_pl_control = false;
#endif
      adf::initializeConfigurations(nullptr, 0, 0, 0,
                                    nullptr, 0,
                                    GraphConfigurations, NUM_GRAPH,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    nullptr, 0,
                                    PLIOConfigurations, NUM_PLIO,
                                    nullptr, 0, 0, nullptr,
                                    false, exclude_pl_control, false);

    }
  } initAIEControlXRT;



#if !defined(__CDO__)

// Kernel Stub Definition
  void OneInput(input_window<int> *,output_window<int> *,output_window<int> *) { /* Stub */ } 
  void OneOutput(input_window<int> *,input_window<int> *,output_window<int> *) { /* Stub */ } 
  void TwoInputs(input_window<int> *,input_window<int> *,output_window<int> *,output_window<int> *) { /* Stub */ } 
#endif
